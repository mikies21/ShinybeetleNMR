uiPattern = uiPattern
),
golem_opts = list(...)
)
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...) {
golem::with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(shiny)
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(ShinybeetleNMR)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "ShinybeetleNMR", # The Name of the package containing the App
pkg_title = "ShinybeetleNMR", # The Title of the package containing the App
pkg_description = "PKG_DESC.", # The Description of the package containing the App
author_first_name = "Michele", # Your First Name
author_last_name = "Fresneda Alarcon", # Your Last Name
author_email = "michelefresneda@gmail.com", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
golem::set_golem_options()
## Create Common Files ----
## See ?usethis for more information
usethis::use_mit_license( "Golem User" )  # You can set another license here
usethis::use_readme_rmd( open = FALSE )
## Add helper functions ----
golem::use_utils_ui()
golem::use_utils_server()
# go to dev/02_dev.R
rstudioapi::navigateToFile( "dev/02_dev.R" )
# You're now set! ----
# go to dev/03_deploy.R
rstudioapi::navigateToFile("dev/03_deploy.R")
golem::add_shinyserver_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
ShinybeetleNMR::run_app() # add parameters here (if any)
library(ShinybeetleNMR)
options( "golem.app.prod" = TRUE)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
ShinybeetleNMR::run_app() # add parameters here (if any)
options( "golem.app.prod" = TRUE)
library(ShinybeetleNMR)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
library(ShinybeetleNMR)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
library(ShinybeetleNMR)
data_CRS %>%
data_CRS
library(tidyverse)
data_CRS %>% group_by(group)
data_CRS %>% group_by(group) %>% summarise(across(where(is.numeric)))
data_CRS %>% group_by(group) %>% summarise(across(where(is.numeric, mean)))
data_CRS %>% group_by(group) %>% summarise(across(where(is.numeric), mean))
data_CRS %>%
dplyr::mutate(dplyr::across(1:10, as.character)) %>%
dplyr::group_by(group) %>%
dplyr::summarise(dplyr::across(where(is.numeric), mean))
library(ShinybeetleNMR)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
library(ShinybeetleNMR)
library(ShinybeetleNMR)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
library(ShinybeetleNMR)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
library(ShinybeetleNMR)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
library(ShinybeetleNMR)
library(ShinybeetleNMR)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
library(ShinybeetleNMR)
library(ShinybeetleNMR)
plot(p)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
data_CRS %>%
+     dplyr::mutate(dplyr::across(1:10, as.character)) %>%
+     dplyr::group_by(group) %>%
+     dplyr::summarise(dplyr::across(where(is.numeric), mean))
data_CRS %>%
+     dplyr::mutate(dplyr::across(1:10, as.character)) %>%
+     dplyr::group_by(group) %>%
+     dplyr::summarise(dplyr::across(where(is.numeric), mean))
data_CRS %>%
dplyr::mutate(dplyr::across(1:10, as.character)) %>%
dplyr::group_by(group) %>%
dplyr::summarise(dplyr::across(where(is.numeric), mean))
data_CRS %>%
dplyr::mutate(dplyr::across(1:10, as.character)) %>%
dplyr::group_by(group) %>%
dplyr::summarise(dplyr::across(where(is.numeric), mean)) %>%
data_CRS %>%
dplyr::mutate(dplyr::across(1:10, as.character)) %>%
dplyr::group_by(group) %>%
dplyr::summarise(dplyr::across(where(is.numeric), mean)) %>% pivot_longer(!1,)
data_CRS %>%
dplyr::mutate(dplyr::across(1:10, as.character)) %>%
dplyr::group_by(group) %>%
dplyr::summarise(dplyr::across(where(is.numeric), mean)) %>% pivot_longer(!1) %>%
data_CRS %>%
dplyr::mutate(dplyr::across(1:10, as.character)) %>%
dplyr::group_by(group) %>%
dplyr::summarise(dplyr::across(where(is.numeric), mean)) %>% pivot_longer(!1) %>% ggplot(aes(x = name, y = value))+geom_line(aes(group = group))
data_CRS %>%
dplyr::mutate(dplyr::across(1:10, as.character)) %>%
dplyr::group_by(group) %>%
dplyr::summarise(dplyr::across(where(is.numeric), mean)) %>% pivot_longer(!1) %>% ggplot(aes(x = name, y = value))+geom_line(aes(group = group))
exP <- data_CRS %>%
dplyr::mutate(dplyr::across(1:10, as.character)) %>%
dplyr::group_by(group) %>%
dplyr::summarise(dplyr::across(where(is.numeric), mean)) %>%
pivot_longer(!1) %>%
ggplot(aes(x = name, y = value))+geom_line(aes(group = group))
exP %>%
plotly::ggplotly()
exP <- data_CRS %>%
dplyr::mutate(dplyr::across(1:10, as.character)) %>%
dplyr::group_by(group) %>%
dplyr::summarise(dplyr::across(where(is.numeric), mean)) %>%
pivot_longer(!1) %>%
ggplot(aes(x = name, y = value, colour = name))+geom_line(aes(group = group))
exP %>%
plotly::ggplotly()
exP <- data_CRS %>%
dplyr::mutate(dplyr::across(1:10, as.character)) %>%
dplyr::group_by(group) %>%
dplyr::summarise(dplyr::across(where(is.numeric), mean)) %>%
pivot_longer(!1) %>%
ggplot(aes(x = name, y = value, colour = group))+geom_line(aes(group = group))
exP %>%
plotly::ggplotly()
exP %>%
plotly::ggplotly() %>% plotly::layout(hovermode = "x unified", tooltip = "metabolite")
exP %>%
plotly::ggplotly()
exP %>%
plotly::ggplotly() %>% plotly::layout(hovermode = "x unified", tooltip = "metabolite")
exP %>%
plotly::ggplotly() %>% plotly::layout(hovermode = "x unified", tooltip = "name")
exP %>%
plotly::ggplotly(tooltip = "name") %>% plotly::layout(hovermode = "x unified", )
exP %>%
plotly::ggplotly(tooltip = "name") %>% plotly::layout(hovermode = "x unified")
exP %>%
plotly::ggplotly(tooltip = "value") %>% plotly::layout(hovermode = "x unified")
exP <- data_CRS %>%
dplyr::mutate(dplyr::across(1:10, as.character)) %>%
dplyr::group_by(group) %>%
dplyr::summarise(dplyr::across(where(is.numeric), mean)) %>%
pivot_longer(!1) %>%
ggplot(aes(x = name, y = value, colour = group, text = name))+geom_line(aes(group = group))
exP %>%
plotly::ggplotly(tooltip = "value") %>% plotly::layout(hovermode = "x unified")
exP %>%
plotly::ggplotly() %>% plotly::layout(hovermode = "x unified")
exP <- data_CRS %>%
dplyr::mutate(dplyr::across(1:10, as.character)) %>%
dplyr::group_by(group) %>%
dplyr::summarise(dplyr::across(where(is.numeric), mean)) %>%
pivot_longer(!1) %>%
ggplot(aes(x = name, y = value, colour = group, text = name))+geom_line(aes(group = group))
exP %>%
plotly::ggplotly() %>% plotly::layout(hovermode = "x unified")
exP %>%
plotly::ggplotly() %>% plotly::layout(hovermode = "x")
exP <- data_CRS %>%
dplyr::mutate(dplyr::across(1:10, as.character)) %>%
dplyr::group_by(group) %>%
dplyr::summarise(dplyr::across(where(is.numeric), mean)) %>%
pivot_longer(!1) %>%
ggplot(aes(x = name, y = value, colour = group, text = name))+geom_line(aes(group = group))
exP %>%
plotly::ggplotly() %>% plotly::layout(hovermode = "x")
unified
exP %>%
plotly::ggplotly() %>% plotly::layout(hovermode = "x unified")
exP %>%
plotly::ggplotly() %>% plotly::layout(hovermode = "x unified")
exP %>%
plotly::ggplotly(tooltip = "name") %>% plotly::layout(hovermode = "x unified")
exP %>%
plotly::ggplotly(tooltip = "name") %>% plotly::layout(hovermode = "x", )
exP %>%
plotly::ggplotly(tooltip = "name") %>% plotly::layout(hovermode = "x")
exP %>%
plotly::ggplotly(tooltip = "name") %>% plotly::layout(hovermode = "x unified")
exP <- data_CRS %>%
dplyr::mutate(dplyr::across(1:10, as.character)) %>%
dplyr::group_by(group) %>%
dplyr::summarise(dplyr::across(where(is.numeric), mean)) %>%
pivot_longer(!1) %>%
ggplot(aes(x = name, y = value, colour = group))+geom_line(aes(group = group))
exP %>%
plotly::ggplotly(tooltip = "name") %>% plotly::layout(hovermode = "x unified")
exP %>%
plotly::ggplotly(tooltip = "text") %>% plotly::layout(hovermode = "x unified")
exP <- data_CRS %>%
dplyr::mutate(dplyr::across(1:10, as.character)) %>%
dplyr::group_by(group) %>%
dplyr::summarise(dplyr::across(where(is.numeric), mean)) %>%
pivot_longer(!1) %>%
ggplot(aes(x = name, y = value, colour = group, text = paste(name)))+geom_line(aes(group = group))
exP %>%
plotly::ggplotly(tooltip = "text") %>% plotly::layout(hovermode = "x unified")
library(ShinybeetleNMR)
data_CRS %>%
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
library(ShinybeetleNMR)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
library(ShinybeetleNMR)
## Run checks ----
## Check the package before sending to prod
devtools::check()
install.packages("cli")
install.packages("cli")
## Run checks ----
## Check the package before sending to prod
devtools::check()
install.packages("cli")
## Run checks ----
## Check the package before sending to prod
devtools::check()
golem::add_shinyappsio_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::add_shinyappsio_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
ShinybeetleNMR::run_app() # add parameters here (if any)
## CI ----
## Use this part of the script if you need to set up a CI
## service for your application
##
## (You'll need GitHub there)
usethis::use_github()
## CI ----
## Use this part of the script if you need to set up a CI
## service for your application
##
## (You'll need GitHub there)
usethis::use_github("origin", url = NULL, overwrite = TRUE)
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
# GitHub Actions
usethis::use_github_action()
# GitHub Actions
usethis::use_github_action()
## CI ----
## Use this part of the script if you need to set up a CI
## service for your application
##
## (You'll need GitHub there)
usethis::use_github()
## CI ----
## Use this part of the script if you need to set up a CI
## service for your application
##
## (You'll need GitHub there)
usethis::use_github()
